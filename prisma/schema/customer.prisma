model Customer {
    ssn          String            @id // primary key
    password     String
    name         String
    email        String
    address      String
    phone_nr     String
    bonus_points Int               @default(0)
    //
    basket_items BasketItem[] // note: this field does not exist in the database
    reviews      Review[]
    sessions     CustomerSession[]
    orders       Order[]
    replies      ReviewReply[]
}

model BasketItem {
    id           Int      @id @default(autoincrement())
    customer_ssn String
    product_id   String
    added_on     DateTime
    size         String
    //
    customer     Customer @relation(fields: [customer_ssn], references: [ssn], onDelete: Cascade, onUpdate: Cascade)
    product      Product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
}

model Review {
    review_id    String        @id @default(uuid())
    customer_ssn String
    product_id   String
    rating       Int // 1-5 sjärnor. TODO: average på product page 
    comment      String
    createdAt    DateTime      @default(now())
    //
    customer     Customer      @relation(fields: [customer_ssn], references: [ssn], onDelete: Cascade, onUpdate: Cascade)
    product      Product       @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
    replies      ReviewReply[]
}

model ReviewReply {
    reply_id      String        @id @default(uuid())
    review_id     String
    customer_ssn  String
    comment       String
    parent_id     String?
    created_at    DateTime      @default(now())
    //
    customer      Customer      @relation(fields: [customer_ssn], references: [ssn], onDelete: Cascade, onUpdate: Cascade)
    review        Review        @relation(fields: [review_id], references: [review_id], onDelete: Cascade, onUpdate: Cascade)
    parent_reply  ReviewReply?  @relation("ReplyReply", fields: [parent_id], references: [reply_id], onDelete: Cascade, onUpdate: Cascade)
    child_replies ReviewReply[] @relation("ReplyReply")
}

model CustomerSession {
    session_token String   @id @default(cuid(2))
    customer_ssn  String
    expiry_date   DateTime
    //
    customer      Customer @relation(fields: [customer_ssn], references: [ssn], onDelete: Cascade, onUpdate: Cascade)
}
